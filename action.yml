name: "App Preview"
description: "A GitHub Action to provide an app preview for pull requests."
author: "Sharezone UG (haftungsbeschränkt)"

inputs:
  android_artifact:
    description: "The name to the android artifact"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v6
      with:
        script: |
          async function upsertComment(owner, repo, issue_number, purpose, body) {
            const {data: comments} = await github.rest.issues.listComments(
              {owner, repo, issue_number});
            const marker = `<!-- bot: ${purpose} -->`;
            body = marker + "\n" + body;
            const existing = comments.filter((c) => c.body.includes(marker));
            if (existing.length > 0) {
              const last = existing[existing.length - 1];
              core.info(`Updating comment ${last.id}`);
              await github.rest.issues.updateComment({
                owner, repo,
                body,
                comment_id: last.id,
              });
            } else {
              core.info(`Creating a comment in issue / PR #${issue_number}`);
              await github.rest.issues.createComment({issue_number, body, owner, repo});
            }
          }

          const {owner, repo} = context.repo;
          const android_artifact = $${{inputs.android_artifact}};
          const run_id = ${{github.event.workflow_run.id}};
          
          const pull_requests = ${{ toJSON(github.event.workflow_run.pull_requests) }};
          if (!pull_requests.length) {
            return core.error("This workflow doesn't match any pull requests!");
          }
          
          const artifacts = await github.paginate(
            github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
          if (!artifacts.length) {
            return core.error(`No artifacts found`);
          }
          
          let body = `⬇️ Generated builds for commit \`${context.sha}\` ⬇️`;
          for (const art of artifacts) {
            if(art.name === android_artifact) {
              const url = `https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip`;
              body += `\n| Android |\n|:-:|\n| ![image](https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${url}) <br /> [Link](${url})`;
            }
          }
          
          core.info("Review thread message body:", body);
          
          for (const pr of pull_requests) {
            await upsertComment(owner, repo, pr.number,
              "app-preview", body);
          }
